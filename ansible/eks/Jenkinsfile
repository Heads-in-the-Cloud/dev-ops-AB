#!groovy
pipeline {
    agent any

    parameters {
        string(
            name: 'ProjectId',
            defaultValue: 'AB-utopia',
            description: 'Identifier applied to all names'
        )
        choice(
            name: 'Env',
            choices: ['Dev', 'Staging', 'Prod'],
            description: 'Deployment environment'
        )
        choice(
            name: 'Operation',
            choices: ['Up', 'Down'],
            description: 'Bring up or take down EKS cluster'
        )
    }

   environment {
        COMMIT_HASH = sh(
            returnStdout: true,
            script: "git rev-parse --short=8 HEAD"
        ).trim()
        S3_BUCKET = params.ProjectId.toLowerCase()
        REGION = sh(
            script: 'aws configure get region',
            returnStdout: true
        ).trim()
        AWS_ACCOUNT_ID = sh(
            script: '''
                aws sts get-caller-identity \
                    --query "Account" \
                    --output text
            ''',
            returnStdout: true
        ).trim()

   }

    stages {
        stage('Configure Environment Inputs') {
            steps {
                script {
                    def ecr_uri = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
                    def image_prefix = "$ecr_uri/${params.ProjectId.toLowerCase()}"
                    env.REVERSE_PROXY_IMAGE = "$image_prefix-reverse-proxy:latest"
                    env.USERS_IMAGE    = "$image_prefix-users-microservice:latest"
                    env.BOOKINGS_IMAGE = "$image_prefix-bookings-microservice:latest"
                    env.FLIGHTS_IMAGE  = "$image_prefix-flights-microservice:latest"
                }
            }
        }

        stage('Deploy EKS') {
            when {
                expression {
                    params.Operation == "Up"
                }
            }
            steps {
                dir("ansible/eks") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "aws s3 cp s3://$S3_BUCKET/env:/${params.Env}/output.json ."
                        sh "ENV=${params.Env} PROJECT_ID=${params.ProjectId} ansible-playbook up.yaml -f 10 --extra-vars @output.json"
                    }
                }
            }
        }

        stage('Destroy EKS') {
            when {
                expression {
                    params.Operation == "Down"
                }
            }
            steps {
                dir("ansible/eks") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "ENV=${params.Env} PROJECT_ID=${params.ProjectId} ansible-playbook down.yaml -f 10 --extra-vars @output.json"
                    }
                }
            }
        }
    }
}

