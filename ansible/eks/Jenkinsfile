#!groovy
pipeline {
    agent any

    parameters {
        string(
            name: 'ProjectId',
            defaultValue: 'AB-utopia',
            description: 'Identifier applied to all names'
        )
        choice(
            name: 'Env',
            choices: ['Dev', 'Staging', 'Prod'],
            description: 'Deployment environment'
        )
        choice(
            name: 'Operation',
            choices: ['Up', 'Down'],
            description: 'Bring up or take down EKS cluster'
        )
    }

    environment {
        S3_BUCKET = params.ProjectId.toLowerCase()
        withCredentials([[
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: "jenkins",
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
        ]]) {

            def aws_account_id = sh(
                script: '''
                    aws sts get-caller-identity \
                        --query "Account" \
                        --output text
                ''',
                returnStdout: true
            ).trim()
            REGION = sh(
                script: 'aws configure get region',
                returnStdout: true
            ).trim()

            def ecr_uri = "${aws_account_id}.dkr.ecr.${REGION}.amazonaws.com"
            def image_prefix = "$ecr_uri/${params.ProjectId.toLowerCase()}"
            REVERSE_PROXY_IMAGE = "$image_prefix-reverse-proxy:latest"
            USERS_IMAGE    = "$image_prefix-users-microservice:latest"
            BOOKINGS_IMAGE = "$image_prefix-bookings-microservice:latest"
            FLIGHTS_IMAGE  = "$image_prefix-flights-microservice:latest"
        }
    }

    stages {
        stage('Deploy EKS') {
            when {
                expression {
                    params.Operation == "Up"
                }
            }
            steps {
                dir("ansible/eks") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "aws s3 cp s3://$S3_BUCKET/env:/${params.Env}/output.json ."
                        sh """
                            ansible-playbook up.yaml \
                                -e @output.json \
                                -e "region=$REGION env=${params.Env} project_id=${params.ProjectId}"
                        """
                    }
                }
            }
        }

        stage('Destroy EKS') {
            when {
                expression {
                    params.Operation == "Down"
                }
            }
            steps {
                dir("ansible/eks") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            ansible-playbook down.yaml \
                                -e @output.json \
                                -e "region=$REGION env=${params.Env} project_id=${params.ProjectId}"
                        """
                    }
                }
            }
        }
    }
}

