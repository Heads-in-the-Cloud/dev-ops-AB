#!groovy
pipeline {
    agent any

    parameters {
        string(
            name: 'ProjectId',
            defaultValue: 'AB-utopia',
            description: 'Identifier applied to all names'
        )
        choice(
            name: 'Env',
            choices: ['Dev', 'Staging', 'Prod'],
            description: 'Deployment environment'
        )
        choice(
            name: 'Operation',
            choices: ['Up', 'Down'],
            description: 'Bring up or take down ECS cluster'
        )
    }

   environment {
        COMMIT_HASH = sh(
            returnStdout: true,
            script: "git rev-parse --short=8 HEAD"
        ).trim()
        S3_BUCKET = params.ProjectId.toLowerCase()
        REGION = sh(
            script: 'aws configure get region',
            returnStdout: true
        ).trim()
        AWS_ACCOUNT_ID = sh(
            script: '''
                aws sts get-caller-identity \
                    --query "Account" \
                    --output text
            ''',
            returnStdout: true
        ).trim()

        ecr_uri = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
   }

    stages {
        stage('Configure Environment Inputs') {
            steps {
                script {
                    withCredentials([
                        string(
                            credentialsId: "${params.Env.toLowerCase()}/${params.ProjectId}/default",
                            variable: 'SECRETS'
                        )
                    ]) {
                        def aws_secrets = readJSON text: SECRETS
                        env.DB_USERNAME = aws_secrets.db_username
                        env.DB_PASSWORD = aws_secrets.db_password
                        env.JWT_SECRET  = aws_secrets.jwt_secret
                    }

                    sh "aws s3 cp s3://$S3_BUCKET/env:/${params.Env}/output.txt ."
                    def tf_output = readProperties file: 'output.txt'
                    env.DOMAIN = tf_output.domain
                    env.VPC_ID = tf_output.vpc_id
                    env.DB_URL = "mysql://${tf_output.db_url}/utopia"
                    env.ALB_ID = tf_output.alb_id

                    def repo_prefix = "$ecr_uri/${env.PROJECT_ID.toLowerCase()}"
                    image_suffixes = {
                        reverse_proxy: "reverse-proxy:latest",
                        flights_microservice: "reverse-proxy:latest",
                        users_microservice: "reverse-proxy:latest",
                        bookings_microserivice: "reverse-proxy:latest",
                    }
                    for(image_suffix in image_suffixes) {
                        env[image_suffix.key.toUpper_case}] = \
                            "${repo_prefix.toLowerCase()}-${image_suffix.value}"
                    }
                }
            }
        }

        stage('Deploy ECS') {
            when {
                expression {
                    !params.Down
                }
            }
            steps {
                sh "ln -s ecs ${params.ProjectId}-ecs"
                dir("${params.ProjectId}-ecs") {
                    sh "docker context use ${params.ProjectId}-ecs"
                    sh "docker compose up"
                    sh "docker context use default"
                }
            }
        }

        stage('Destroy ECS') {
            when {
                expression {
                    params.Down
                }
            }
            steps {
                dir("${params.ProjectId}-ecs") {
                    sh "docker context use ${params.ProjectId}-ecs"
                    sh "docker compose down"
                    sh "docker context use default"
                }
                sh "rm -f ${params.ProjectId}-ecs"
            }
        }
    }
}
