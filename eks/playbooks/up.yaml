---
- hosts: 127.0.0.1
  connection: local

  vars:
    project_id: "{{ lookup('env', 'PROJECT_ID') }}"
    env: "{{ lookup('env', 'ENV') }}"
    email: austin.baugh@smoothstack.com
    domain_zone: "hitwc.link"
    domain_record: "{{ project_id | lower }}.hitwc.link"
    microservices:
      - flights-microservice
      - bookings-microservice
      - users-microservice
    secrets: "{{ lookup('amazon.aws.aws_secret', '{{ env | lower }}/{{ project_id }}/default') }}"

  tasks:

    - name: Get AWS account id
      shell:
        aws sts get-caller-identity
          --query "Account"
          --output text
      register: aws_account_id
    - name: Get AWS region
      shell: aws configure get region
      register: aws_region

    - name: Create EKS cluster
      shell:
        eksctl create cluster
          --name "{{ project_id }}"
          --region "{{ aws_region.stdout }}"
          --nodes 2
          --node-type t3.small
          --alb-ingress-access
          --vpc-public-subnets "{{ subnet_ids.public | join(',') }}"
          --vpc-private-subnets "{{ subnet_ids.private | join(',') }}"

# ---------------------------------------------------------------------------- #
#                  Setup AWS load balancer ingress controller                  #
# ---------------------------------------------------------------------------- #

    - name: Associate IAM OIDC provider for ALB
      shell:
        eksctl utils associate-iam-oidc-provider
          --region "{{ aws_region.stdout }}"
          --cluster "{{ project_id }}"
          --approve

    - name: Create IAM service account w/ role & attached policies for ALB
      shell:
        eksctl create iamserviceaccount
          --name=aws-load-balancer-controller
          --cluster "{{ project_id }}"
          --namespace=kube-system
          --attach-policy-arn="arn:aws:iam::{{ aws_account_id.stdout }}:policy/AWSLoadBalancerControllerIAMPolicy"
          --attach-policy-arn="arn:aws:iam::{{ aws_account_id.stdout }}:policy/AWSLoadBalancerControllerAdditionalIAMPolicy"
          --override-existing-serviceaccounts
          --approve

    - name: Install the TargetGroupBinding custom resource definitions
      shell:
        kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"

    - name: Install AWS load balancer controller
      shell:
        helm upgrade
          -i aws-load-balancer-controller aws-load-balancer-controller
          --repo https://aws.github.io/eks-charts
          --set clusterName="{{ project_id }}"
          --set vpcId="{{ vpc_id }}"
          --set region="{{ aws_region.stdout }}"
          --set serviceAccount.create=false
          --set serviceAccount.name=aws-load-balancer-controller
          -n kube-system

# ---------------------------------------------------------------------------- #
#                             Deploy microservices                             #
# ---------------------------------------------------------------------------- #

    - name: Set k8s secrets from stdin literals
      shell: |
        kubectl create secret generic db-info \
          -n microservices \
          --from-literal db-url="mysql://{{ db_url }}:3306/utopia" \
          --from-literal db-user="{{ secrets.db_username }}" \
          --from-literal db-password="{{ secrets.db_password }}"
        kubectl create secret generic jwt-secret \
          -n microservices \
          --from-literal jwt-secret="{{ secrets.jwt_secret }}"

    - name: Deploy microservices
      shell:
        envsubst < "../k8s/{{ item }}.yml" | kubectl apply -f -
      environment:
        PROJECT_ID: "{{ project_id | lower }}"
        AWS_ACCOUNT_ID: "{{ aws_account_id.stdout }}"
        AWS_REGION: "{{ aws_region.stdout }}"
      with_items: "{{ microservices }}"
    - name: Apply ingress rules
      shell:
        envsubst < ../k8s/ingress.yml | kubectl apply -f -
      environment:
        DOMAIN: "{{ domain_record }}"
        AWS_REGION: "{{ aws_region.stdout }}"
        AWS_ACCOUNT_ID: "{{ aws_account_id.stdout }}"
        ACM_CERT_ARN: "{{ acm_cert_arn }}"

# ---------------------------------------------------------------------------- #
#                  Point Route53 record to ALB w/ external-dns                 #
# ---------------------------------------------------------------------------- #

    - name: Create IAM service account w/ role & attached policies for external-dns
      shell:
        eksctl create iamserviceaccount
          --name=external-dns
          --cluster "{{ project_id }}"
          --namespace=default
          --attach-policy-arn="arn:aws:iam::{{ aws_account_id.stdout }}:policy/AllowExternalDNSUpdates"
          --override-existing-serviceaccounts
          --approve
    - name: Apply external-dns deployment manifest
      shell:
        envsubst < ../k8s/external-dns.yml | kubectl apply -f -
      environment:
        DOMAIN: "{{ domain_zone }}"
        AWS_ACCOUNT_ID: "{{ aws_account_id.stdout }}"
        R53_ZONE_ID: "{{ r53_zone_id }}"
        IAM_SERVICE_ROLE_NAME: "{{ project_id }}-external-dns"
