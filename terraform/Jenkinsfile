#!groovy
pipeline {
    agent any

    parameters {
        string(
            name: 'ProjectId',
            defaultValue: 'AB-utopia',
            description: 'Identifier applied to all names'
        )
        choice(
            name: 'Env',
            choices: ['Dev', 'Staging', 'Prod'],
            description: 'Deployment environment'
        )
        booleanParam(
            name: 'PlanOnly',
            defaultValue: true,
            description: 'Determines whether or not to run the final stage'
        )
        choice(
            name: 'Operation',
            choices: ['Apply', 'Destroy'],
            description: 'Base infrastructure operation'
        )
    }

   environment {
        COMMIT_HASH = sh(
            script: "git rev-parse --short=8 HEAD",
            returnStdout: true
        ).trim()
        S3_BUCKET = params.ProjectId.toLowerCase()
        REGION = sh(
            script:'aws configure get region',
            returnStdout: true
        ).trim()
    }

    stages {
        stage('Plan') {
            steps {
                dir("terraform") {
                    script {
                        if(params.Operation == "Apply") {
                            env.plan_file_path = "plans/apply-${COMMIT_HASH}.tf"
                        } else {
                            env.plan_file_path = "plans/destroy-${COMMIT_HASH}.tf"
                        }
                    }
                    sh """cat > terraform.tf << EOF
terraform {
  backend "s3" {
    bucket  = "$S3_BUCKET"
    key     = "terraform/terraform.tfstate"
    region  = "$REGION"
    encrypt = true
  }
}
EOF
                    """
                    sh """cat > terraform.tfvars << EOF
region = "$REGION"
project_id = "${params.ProjectId}"
environment = "${params.Env.toLowerCase()}"
EOF
                    """
                    sh 'terraform init -input=false -migrate-state'
                    sh "terraform workspace select ${params.Env}-${params.ProjectId} || terraform workspace new ${params.Env}-${params.ProjectId}"
                    sh 'mkdir -p plans'
                    script {
                        if(params.Operation == "Apply") {
                            sh "terraform plan -input=false -out ${env.plan_file_path}"
                        } else {
                            sh "terraform plan -destroy -input=false -out ${env.plan_file_path}"
                        }
                    }
                    sh "aws s3 cp ${env.plan_file_path} s3://$S3_BUCKET/terraform/plans/"
                    sh "terraform show ${env.plan_file_path}"
                }
            }
        }

        stage('Apply') {
            when {
                expression { params.Operation == "Apply" }
            }

            steps {
                dir("terraform") {
                    sh "terraform apply -input=false ${env.plan_file_path}"
                    sh 'terraform refresh'
                    sh 'terraform output | tr -d \'\\\"\\ \' > output.tf'
                    sh "aws s3 cp output.tf s3://$S3_BUCKET/terraform/"
                    sh 'rm -f output.tf'
                }
            }
        }

        stage('Destroy') {
            when {
                expression { params.Operation == "Destroy" }
            }

            steps {
                dir("terraform") {
                    sh "terraform apply -input=false ${env.plan_file_path}"
                }
            }
        }
    }
}
