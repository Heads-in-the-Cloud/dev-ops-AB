#!groovy
pipeline {
    agent any

    parameters {
        booleanParam(
            name: 'Destroy',
            defaultValue: false,
            description: 'Destroy existing build'
        )
    }

   environment {
        PROJECT_ID = "AB-utopia"
    }

    stages {
        stage('Plan') {
            steps {
                dir("terraform") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        script {
                            def s3_bucket = params.ProjectId.toLowerCase()
                            def region = sh(
                                script:'aws configure get region',
                                returnStdout: true
                            ).trim()
                            sh """cat > terraform.tf << EOF
terraform {
  backend "s3" {
    bucket  = "$s3_bucket"
    key     = "terraform.tfstate"
    region  = "$region"
    encrypt = true
  }
}
EOF
                            """
                            sh """cat > terraform.tfvars << EOF
region = "$region"
project_id = "${params.ProjectId}"
environment = "${params.Env.toLowerCase()}"
EOF
                        """
                            sh 'terraform init -input=false -migrate-state -upgrade'
                            sh "terraform workspace select ${params.Env} || terraform workspace new ${params.Env}"
                            if(!params.Destroy) {
                                sh "terraform plan -input=false -out plan.bin"
                            } else {
                                sh "terraform plan -destroy -input=false -out plan.bin"
                            }
                        }
                    }
                    sh "terraform show plan.bin"
                }
            }
        }

        stage('Apply') {
            when {
                expression {
                    !params.Destroy
                }
            }

            steps {
                dir("terraform") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "terraform apply -input=false plan.bin"
                        sh 'terraform refresh'
                        sh "terraform output --json | jq 'with_entries(.value |= .value)' > output.json"
                        sh "aws s3 cp output.json s3://$s3_bucket/env:/${params.Env}/"
                    }
                }
            }
        }

        stage('Destroy') {
            when {
                expression {
                    params.Destroy
                }
            }

            steps {
                dir("terraform") {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "jenkins",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "terraform apply -input=false plan.bin"
                    }
                }
            }
        }
    }
}
