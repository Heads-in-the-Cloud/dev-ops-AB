#!groovy
pipeline {
    agent any

    parameters {
        booleanParam(
            name: 'Apply',
            defaultValue: false,
            description: 'Apply Terraform plan'
        )
        booleanParam(
            name: 'Destroy',
            defaultValue: false,
            description: 'Destroy Terraform build'
        )
    }

   environment {
        COMMIT_HASH = sh(
            returnStdout: true,
            script: "git rev-parse --short=8 HEAD"
        ).trim()
        //TF_S3_BUCKET = "tf-plans-ab"
        REGION = sh(
            script:'aws configure get region',
            returnStdout: true
        ).trim()

        PROJECT_ID  = credentials('project-id')
        ENV         = credentials('env')
        PUB_SSH_KEY = credentials('pub-ssh-key')
    }

    stages {

        stage('Terraform Plan') {
            when {
                expression {
                    params.Apply
                }
            }

            steps {
                dir("terraform") {
                    sh """cat > terraform.tf << EOF
terraform {
  backend "s3" {
    bucket  = "utopia-${PROJECT_ID.toLowerCase()}"
    key     = "terraform/terraform.tfstate"
    region  = '$REGION'
    encrypt = true
  }
}
EOF
                    """
                    sh """cat > terraform.tfvars << EOF
region = '$REGION'
project_id = '$PROJECT_ID'
environment = '$ENV'
public_ssh_key = "$PUB_SSH_KEY'
EOF
                    """
                    sh 'mkdir -p plans'
                    sh 'terraform init -no-color -input=false'
                    //sh 'terraform workspace select ${environment} || terraform workspace new ${environment}'

                    sh """
                        terraform plan \
                            -no-color \
                            -input=false \
                            -out plans/apply-${COMMIT_HASH}.tf
                    """
                    //sh "aws s3 cp plans/${COMMIT_HASH} s3://${TF_S3_BUCKET}"
                    sh """
                        terraform show \
                            -no-color plans/apply-${COMMIT_HASH}.tf
                    """
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression {
                    params.Apply
                }
            }

            steps {
                dir("terraform") {
                    sh "terraform apply -no-color -input=false plans/apply-${COMMIT_HASH}.tf"
                    sh 'terraform refresh -no-color'
                    sh 'terraform output | tr -d \'\\\"\\ \' > ../../output.tf'
                }
            }
        }

        stage('Terraform Plan Destroy') {
            when {
                expression {
                    params.Destroy
                }
            }

            steps {
                dir("terraform") {
                    sh 'mkdir -p plans'
                    sh 'terraform init -no-color -input=false'
                    //sh 'terraform workspace select ${environment} || terraform workspace new ${environment}'

                    sh "terraform plan -destroy -no-color -input=false -out plans/destroy-${COMMIT_HASH}.tf"
                    //sh "aws s3 cp plans/${COMMIT_HASH} s3://${TF_S3_BUCKET}"
                    sh "terraform show -no-color plans/destroy-${COMMIT_HASH}.tf"
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression {
                    params.Destroy
                }
            }

            steps {
                dir("terraform") {
                    sh "terraform apply -no-color -input=false plans/destroy-${COMMIT_HASH}.tf"
                }
            }
        }
    }

    post {
        cleanup {
            script {
                sh 'rm terraform/terraform.tfvars'
            }
        }
    }

}
