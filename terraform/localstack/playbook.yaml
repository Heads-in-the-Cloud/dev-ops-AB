# ---------------------------------------------------------------------------- #
#             playbook for creating storage resources on localstack            #
#                  (which the base-infrastructure depends on)                  #
# ---------------------------------------------------------------------------- #
---
- hosts: managed_node

  vars:

    project_id: AB-utopia
    containers:
      - reverse-proxy
      - bookings-microservice
      - flights-microservice
      - users-microservice
    secret:
      jwt_secret: "{{ lookup('password', 'credentials/jwt_secret.txt chars=ascii_lowercase,digits length=32') }}"
      db_root_username: db_admin
      db_root_password: "{{ lookup('password', 'credentials/db_admin.txt chars=ascii_lowercase,digits length=16') }}"
      db_username: db_user
      db_password: "{{ lookup('password', 'credentials/db_user.txt chars=ascii_lowercase,digits length=16') }}"
    tmp_dir: /tmp
    aws_region: us-west-2
    aws_profile: hitwc
    mock_access_key: local
    mock_secret_key: local
    localstack_endpoint: http://localhost:4566
    s3_bucket: ab-utopia
    ami_id: ami-0b3456eff9b6f87f1

  tasks:

# ---------------------------------------------------------------------------- #
#                                Use virtualenv                                #
# ---------------------------------------------------------------------------- #

  - name: Get python3 path
    shell: which python3
    register: python3

  - name: Change python interpreter to use virtualenv
    set_fact:
      ansible_python_interpreter: "{{ tmp_dir }}/venv/bin/pyvenv"

  - name: Assert we are in a virtualenv
    shell: echo $VIRTUAL_ENV
    register: command_result
    failed_when: command_result.stdout == ""

# ---------------------------------------------------------------------------- #
#                               Start Localstack                               #
# ---------------------------------------------------------------------------- #

  - name: Run localstack
    shell: |
      localstack start -d
      localstack wait
    environment:
      SERVICES: "s3,ecr,secretsmanager,route53,iam,ec2,elbv2,rds"
      HOSTNAME_EXTERNAL: "{{ inventory_hostname }}"
      LOCALSTACK_API_KEY: "{{ localstack_api_key }}"
    register: localstack

  - debug:
      msg: "value={{ localstack.stderr }}"

  - name: Create HTTP proxy for Localstack dashboard
    containers.podman.podman_container:
      name: nginx
      image: docker.io/nginx
      recreate: yes
      volume:
        - "{{ playbook_dir }}/nginx.conf:/etc/nginx/templates/nginx.conf.template:ro"
      ports:
        - "4566:4566"
      env:
        DOMAIN: localhost
        ANSIBLE_NODE_HOST: "{{ inventory_hostname }}"
      etc_hosts: "{{ inventory_hostname }}={{ ansible_default_ipv4.address }}"
      state: started
    delegate_to: localhost

# ---------------------------------------------------------------------------- #
#                           Create storage resources                           #
# ---------------------------------------------------------------------------- #

  - name: Create S3 bucket for Terraform state file
    amazon.aws.s3_bucket:
      name: "{{ project_id | lower }}"
      aws_access_key: "{{ mock_access_key }}"
      aws_secret_key: "{{ mock_secret_key }}"
      s3_url: "{{ localstack_endpoint }}"
      state: present

  - name: Create ECR repositories
    community.aws.ecs_ecr:
      name: "{{ project_id | lower }}-{{ item }}"
      aws_access_key: "{{ mock_access_key }}"
      aws_secret_key: "{{ mock_secret_key }}"
      ec2_url: "{{ localstack_endpoint }}"
    with_items: "{{ containers }}"

  - name: Create secret string with Key/Value items
    community.aws.aws_secret:
      name: "dev/{{ project_id }}/default"
      aws_access_key: "{{ mock_access_key }}"
      aws_secret_key: "{{ mock_secret_key }}"
      ec2_url: "{{ localstack_endpoint }}"
      state: present
      secret_type: 'string'
      secret: "{{ secret | to_json }}"

  #- name: create Route53 zone
  #  community.aws.route53_zone:
  #    zone: hitwc.link
  #    aws_access_key: "{{ mock_access_key }}"
  #    aws_secret_key: "{{ mock_secret_key }}"
  #    ec2_url: "{{ localstack_endpoint }}"

  - name: Go back to original python interpreter
    set_fact:
      ansible_python_interpreter: "{{ python3.stdout }}"
